#!/usr/bin/env python3
# -------------------------------------------------------------------------------
# imports
# -------------------------------------------------------------------------------
import os
import argparse
import hvac  # pip install hvac
import zmq   # pip install pyzmq
# from daemons.prefab import run


# -------------------------------------------------------------------------------
# parse the command line and build the running configuration
# -------------------------------------------------------------------------------
def parse_cli():
    config = dict()
    config['VAULT_URL'] = "http://localhost:8200"
    config['COMMANDS'] = "shutdown loader cleanup"
    config['PORT'] = 8899

    return config


# -------------------------------------------------------------------------------
# get the vault token from input
# -------------------------------------------------------------------------------
def read_vault_token():
    return input("Enter the Vault Token: ")


# -------------------------------------------------------------------------------
# connect to the vault
# -------------------------------------------------------------------------------
def vault_connect(config):
    return hvac.Client(url=config['VAULT_URL'], token=config['VAULT_TOKEN'])


# -------------------------------------------------------------------------------
# subscribe to messages
# -------------------------------------------------------------------------------
def subscribe(config):
    port = config['PORT']

    context = zmq.Context()
    socket = context.socket(zmq.SUB)
    socket.connect("tcp://localhost:{}".format(port))

    filters = config['COMMANDS']
    for f in filters:
        socket.setsockopt_string(zmq.SUBSCRIBE, f)

    return socket


# -------------------------------------------------------------------------------
# Main loop. if shutdown - shut down the process
# -------------------------------------------------------------------------------
def run(subscriber, vault):
    stop = False
    while not stop:
        command = subscriber.recv_string()

        if command.lower() == 'shutdown':
            print("Shut down the background process")
            stop = True
        else:
            run_cmd(command)


# -------------------------------------------------------------------------------
# parse commands from the socket
# available commands:
#   loader - return the password for bloomberg and database
#   cleaner - return the password for database only
# -------------------------------------------------------------------------------
def run_cmd(command):
    # fetch the latest secret(s) from the vault
    # Set up the environment
    if command == "loader":
        print("Run loader command, below are the passwords: ")
        os.environ['BLOOMBERG'] = credential_for_bloomberg()
        os.environ['DATABASE'] = credential_for_database()
    elif command == "cleaner":
        print("Run cleaner command, below are the passwords: ")
        os.environ['BLOOMBERG'] = ''
        os.environ['DATABASE'] = credential_for_database()
    else:
        print("Please type one of commands: loader or cleaner")

    if os.getenv('DATABASE'):
        print("bloomberg password: {}".format(os.getenv('DATABASE')))
    if os.getenv('BLOOMBERG'):
        print("dabatase password: {}".format(os.getenv('BLOOMBERG')))

def credential_for_bloomberg():
    data = vault.read("secret/data/bloomberg")
    return data['data']['data']['password']


def credential_for_database():
    data = vault.read("secret/data/database")
    return data['data']['data']['password']


# ------------------------------------------------------------------------------
# main program
# -------------------------------------------------------------------------------
if __name__ == '__main__':
    # Init OS Environment Values
    os.environ['BLOOMBERG'] = ''
    os.environ['DATABASE'] = ''

    # Setup the configuration
    cfg = parse_cli()

    # Get the token from the input
    if 'VAULT_TOKEN' not in cfg:
        cfg['VAULT_TOKEN'] = read_vault_token()

    # Connect to the vault
    vault = vault_connect(cfg)
    print("Vault Connected, Waiting for the Command from ORCH")

    # prepare to receive commands (just create the channel)
    subscriber = subscribe(cfg)

    # start the main loop
    run(subscriber, vault)


    # Close the vault, do any other cleanup here
    vault.adapter.close()
